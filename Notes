Scala - pronounced "Skah lah"

Functional + Object oriented with static type system without much boiler plate code


Why Scalable?
Intertwining of functional and object oriented style into a uniform language design

function value is an object
function type is a class that can be inherited by subclasses

Scala lets one add new types that can behave as native types
We can design and implement abstractions in scala that address radical new domains yet feel like native features of scala

Scala is purely object oriented
Every value is an object and every operation is a method call


Scala strings are implemented by Java String class

Scala does not infer the types of function parameters though it can infer the result type except in the case of recursive function when the result type needs to be explicitly stated
Scala does not assign generic types to function parameters (no polymorphism?)
The block following the function declaration specifies expression(s) that result in a value
The curly braces around the function body could be omitted if there is only one expression that constitutes the function body


- "vars" vs "vals"
  "vars" are mutable whereas "vals" are immutable

- Array elements are accessed using round brackets instead of square brackets
  for example my_array(0), my_array(1) ...

  val my_array = new Array[Strings /*type parameter */](3)
  my_array(0) /* Gives access to first element of the array */

  This is because an array is an object and round brackets imply a function call. For any object in scala if it is followed by a parenthesis then a special method called 'apply' is invoked on that object. Of course, the class has to define the 'apply' method for program to compile.

  my_array(0) == my_array.apply (0)

  Similarly, an assignment to a particular object involving parenthesis shall be converted to an 'update' method call on that object with the arguments in parenthesis along with the assigned value as the final arguments to the method

  my_array(0) = "Hello" /* == my_array.update (0, "Hello") */

- *Arrays are mutable objects* - We cannot change the length of array once initialized, but it is possible to change the contents of individual elements of the array
  Immutable relative of Array is scala List

- If an operator-method ends in a ':' then it is right associative (i.e it is applied to object on the right of it) otherwise it is left associative

- tuples 
    val pair = (1, "Hello") /* Tuple2[Int, String] */
    Console println pair._1
    Console println pair._2

  Tuples currently limited to 22 members for now in version scala-2.9

  It does not use implicit 'apply' method (pair(0)) because the apply method returns the same type of objects


- The first parameter to args is not the program name but the first command line argument to program

- '1 -> "Hello"' <=> '1.->("Hello")' <=> '(1, "Hello")'
  "->" is a method with arity "2" that can be invoked on any pair of objects and returns a tuple as above


CLASSES and OBJECTS
--------------------

- fields are also called instance variables
- field can be made private using "private" access modifier
- fields are "public" by default which is indicated by abscence of any access modifier
- method parameters in a class method are "vals" (immutable)

caveat: Whenever "=" before the body of function is omitted, its result type will definitely be Unit irrespective of the type of body (as scala can convert any type to Unit)
def g () { "this String gets lost" }
g: () Unit

def h () = { "this string does not get lost" }
h: () java.lang.String

- Scala does not have static members instead it provides "Singleton" Objects (where all static members of that class can be gathered
  o Defined using "object" keyword
  o Methods can be called using <ClassName>.<Methodname> (<Args>)
  o Singleton object is a first-class object
  o Singleton objects cannot take parameters
  o Singleton object is initialized the first time some code accesses it 
  o Could be a "standalone" or a "companion" object
  o A standalone object can be used to place utility functions and/or define entry point for applications
  o Ex main for scala application
      object Summer {
        def main (args : Array[String]) { /* Required signature of main */
          ...
        }
      }

    Alternatively "Application" trait can be used which brings in a boilerplate main at the expense of access to command line arguments, threading and optimization.

- "Companionship"
  o When a singleton object shares the same name with a class, it is called that class's "companion object" and the class is called "companion class" of that object
  o Both the class and companion object should reside in same source file for it to get successfully compiled
  o A class and its companion object can both access each other's private members (akin to C++ friend class)


Scala implicitly imports members of package java.lang and scala and members of a singleton object named Predef into every scala source file (prinln is actually Predef.println which in turn calls Console.println. Similarly assert is Predef.assert)

- All operators are methods in Scala. Any method can be used in operator notation

- scala can delay the evaluation of arguments or completely decline to evaluate them. This is how short circuiting of boolean operators (methods) is achieved in scala

- "==" operator checks for value equality
- "eq" or "ne" can be used to compare for reference equality of native java objects 
- scala decides operator precedence based on the first character of the methods used in operator notation apart from its usual operator precedence table
- No matter what associativity an operator has its operands are always evaluated left to right.
  a ::: b <=> val x = a; b.::: (x)

- There is "this" keyword that references self

Auxiliary Constructors
----------------------
- It is possible for a class in scala to have multiple constructors, any constructor other than primary constructor is called an auxiliary constructor
- Every auxiliary constructor must invoke another constructor of the same class as its first action ( "this (...)" ). The invoked constructor is either the primary constructor or any other auxiliary constructor that textually comes before the current auxiliary constructor. Inevitably, the primary constructor will be called, there is no escaping that as it is the single point of entry of a class. Any superclass constructor can only be called by a primary constructor


- Scala compiler internally mangles operator identifiers to turn them into valid Java identifiers. For ex ":->" mangles to "$colon$minus$greater". The mangled form can be used to access this identifier from Java

Mixed identifier - Alphanumeric id followed by "_" (underscore) and an operator identifier. Ex "unary_+" used as a method name defines a unary + method. "myvar_=" used as method name defines an assignment operator.

- It is mandatory to assign return type to recursive methods and overloaded functions when they call their other counterparts otherwise scala gives a compile error

- Scala assignment results in a Unit Value

- for (item <- items [if <cond>]) // Conditional iteration through elements of collection, the expression inside for is called generator, produces a result
- A for can contain multiple filters (if) for a single generator as well as multiple generators
- for can have midstream assignments that can be used in body and yield statements that add element to result collection
  Syntax: for <clauses> yield body 
  body could comprise of multiple statements

- try-catch-finally, A value, if any, computed in finally clause is dropped in scala

- same variable names can be used in different scope with variables in inner scope shadowing variables in outer scope

- anonymous functions are called function literals which are compiled into function values
  Syntax : (x: Int) => x + 1
           var increase = (x: Int) => x + 1

- Placeholder syntax  (fill in the blanks)
    var increase = (_: Int) + 1
    val f = (_: Int) + (_: Int) (Position matters, the first "_" is for the first parameter and second "_" for the second

- To create a partially applied function with all parameters missing, do the following
    def sum (x: Int, y: Int, z: Int): Int = x + y + z
    val partial_sum = sum _

  This method can be used to wrap methods and nested functions in function value and pass them around

- Repeated parameters
  def echo (args : String*) = for (arg <- args) println (arg)
  accepts 1 or more number of String variables (implemented as array though it does not directly accept an array)

- Scala only optimizes direct recursive tail calls (no mutual recursion)


Object Oriented Programming
---------------------------

- Abstract class : tells that the class *MAY* have abstract members that do not have any implementation upfront
- In scala a field can override a method and it is an error to define a field and a method with same name
- "final" method : method cannot be "override"den by subclasses anymore
- "final" class : class cannot be subclassed anymore

Traits
------

- Widens thin interfaces to rich ones
- stackable modifications

Pattern Matching

- A simple case starting with lowercase is taken to be a pattern variable, all other references are taken to be constants
- Matching 'list' of arbitrary length
    expr match {
      case List (0, _*) =>
      case _ =>
    }
- The patterns could be typed
    def some_lenght (x: Any) : Int = x match {
        case s: String => s.length
        case m: Map[_, _] => m.size
        case _ => -1
      }
  Alternate if (x.isInstanceOf [String]) x.asInstanceOf[String].length

- Any container loses its type information on account of type erasure. Java generics loose their type information on run-time. A map of int to int is the same as a map from int to string.
- The exception to type erasure rule is Array. It is treated differently and maintains its type even at runtime

Sealed class
 - Adding sealed keyword to an abstract class limits the case classes to be declared in the same source file. This leads to enhanced compiler support as it can flag missing patterns while matching. Otherwise the client is free to define a case class of a super class anywhere and anytime in a project and forego compiler support for flagging missing cases.


Lists

- Immutable, recursive
- Lists are "covariant". If S and T are two types and S is a subtype of T then List[S] is a subtype of List[T]
- Nil has type List[Nothing], which is again "covariant" as Nothing is a subtype of every type

- When we do a pattern match on infix operator like "::" it translates to x :: xs <=> :: (x, xs) where "::" is a class and this is its constructor

First order method : A method that does not any function as an argument


Scala type inference is local, flow based. The problem of not able to infer types properly at times is not present in global Hindley-Milner style

List buffers : mutable lists with constant time append (+=) and prepend (+=:) operations
Array buffer : Array in which one can potentially add or delete elements from beginning or end of sequence

Private Constructors : class Queue[T] private (private val leading: List[T], private val trailing: List[T])
                       The private keyword between class name and its paramters suggests that the constructor of the class is private


Variance and Variance Annotations
----------------------------------
Generic types by default have a nonvariant (or rigid) subtyping. If Queue[T] is a generic then Queue[String] is not a subtype of Queue[Any] (even though String is a subtype of Any) by default. If Queue[String] is a subtype of Queue[Any] then it is called covariance. To enable this while declaring Queue generic we need to say Queue[+T]
Prefixing a formal type paramter with + indicates that subtyping is covariant
There is also a contravariant subtyping indicated by a prefix of "-" on type parameter (Queue[-T]), which says that if T is a subtype of S then Queue[S] is a subtype of Queue[T]

- Arrays are covariant in Java but not in scala (throws an ArrayStore exception if an invalid operation (maybe assign) is done assuming covariant types)

Lower bounds
def enqueue[U >: T] (x: U) = new Queue[U] (leading, x :: trailing)

T is lower bound on U, hence U is a supertype of T.

Upper bounds
[T <: Ordered[T]], type parameter T has an upper bound 'Ordered'

Liskov Substitution principle :- A type S can be substituted in place of T if S is a subtype of T that is it provides the same functionality as that of T and possibly more.

- Function argument types are declared to be contravariant and function return types are declared to be covariant


Abstract Members
----------------

- four kinds
  o vals
  o vars
  o methods
  o types

  Ex of all 4 kinds of abstract members

  trait Abstract {
    type T
    def transform (x: T): T
    val initial: T
    var current: T
  }

  // example implementation that provides these definitions
  class Concrete extends Abstract {
    type T = String
    def transform (x: String): String = x + x
    val initial = "hi"
    var current = initial
  }

  An abstract val resembles parameterless method but since a paramterless method can return different values opon subsequent invocation but a val cannot, an abstract val
  cannot be reimplemented using a parameterless method but a parameterless abstract method can be implemented using a val.

  Initialization order is not the same for class parameters and abstract fields. A class parameter argument is evaluated before it is passed to the class constructor
  (unless the parameter is by-name). An implementing val definition in a subclass, by contrast, is evaluated only after the superclass has been initialized.

  Pre-initialized fields and lazy vals
  ------------------------------------
  Pre-initialized fields let you initialize fields of a subclass before superclass is called. (Place the field definition in braces before the superclass constructor call)
  Pre-initialized field's this refers to subclass instead of super because the super is not instantiated yet.

  Val definitions can also be made lazy. If a val definition is pre-fixed with a lazy modifier, the initializing expression on the right-hand side will only be
  evaluated the first time the val is used.
  This is similar as if a val is def'd but unlike a method, a lazy val is evaluated only once (upon its very first use)
  
  Objects in scala can have types as members and such types are called path dependent types
        


Unclear Concepts:

4) Function as objects and Function types as classes
5) Abstract type vs generic types
6) companion object
7) factory method
8) no accumulator value in reduceLeft??
9) Singleton Objects
10) Synthetic class
11) Symbols
12) What is the criteria for an immutable object. Is there a thing called immutable class?
       Class having only "val" fields??

    var a = new SomeImmutableClass (...)
    should 'a' be called a mutable object or an immutable object?

    val b = new SomeMutableClass (...)
    should 'b' be called a mutable object or an immutable object?
13) Generator
14) Combinators
15) Annotations
16) Hash tries
17) When do we use a trait over an abstract class (Trait with only abstract members translate to Java interfaces)
18) Checks for covarance, contravariance and nonvariance correctness. How is it done is not clear?
19) Definition-site variance declaration vs use-site variance declaration
20) Lower bound and Upper bound type specifications
21) By-name class parameters
